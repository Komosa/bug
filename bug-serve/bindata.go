// Code generated by go-bindata.
// sources:
// js/BugApp.js
// js/BugList.js
// js/BugPage.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsBugappJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xcb\x4e\xe3\x4a\x10\x5d\x3b\x5f\x51\xd7\x0b\x64\x84\x65\xb8\x57\x77\x15\x14\x8d\x78\x09\x18\xf1\x18\x41\x16\x23\x8d\x66\xd1\xd8\x95\xa4\xa1\xd3\xf6\x74\x97\x19\x10\xca\xbf\x4f\xf5\x23\xd8\x81\xa0\x09\x9b\x28\xae\xae\x73\xfa\x54\x9d\xaa\x7e\x14\x06\x0e\xdb\xe9\x41\xd3\xc0\x08\x6e\x50\x94\x54\x94\x06\x05\xe1\x91\x12\xd6\x66\x2f\x83\xa4\x92\xb6\x51\xe2\xf9\x4a\xcc\x71\x08\x69\xc8\x4d\xf3\xc1\x20\x29\xeb\x79\x53\x6b\xd4\x74\x2c\xab\xcb\xba\xd5\x34\x84\x49\xab\x4b\x92\xb5\x86\x6c\x1b\x18\x9a\x38\x76\x9a\x09\x62\x6e\x9a\x49\xbb\xcf\xa1\x83\x7b\xf1\x74\x8a\x94\xa5\xbb\xd2\xda\x16\xed\x6e\x9a\xf7\x60\x06\x2d\x73\x5a\x0c\xf0\xc4\x61\x0b\x8b\x74\x4b\xac\x28\xf3\xa1\xc4\x49\xb0\xe9\x10\xbe\xde\x5e\x5f\x15\x8d\x30\x16\x3b\x94\x4b\x58\x6c\xbb\x6b\xc2\x6f\x77\x19\x93\x90\xd4\x0c\xfc\xec\x6d\xb7\x4b\xe0\x46\x37\x2e\xf2\x41\x32\x45\x3a\xd7\x92\xa4\x50\x9e\xe8\x7d\x57\x0c\x52\x6b\x74\xb8\xb3\xcf\xff\xe2\xd0\x1c\x1a\x4b\x52\xc8\xdf\xe9\x75\x83\x1a\xce\x7d\x9b\xd2\x70\x14\x6b\xff\xf1\x33\x8f\x60\x85\x25\x61\xc5\x61\x27\x8e\x4f\x74\xab\x94\x13\x13\xb5\x58\x9f\xc0\xc7\x67\x42\x57\x0a\x4d\x5f\x4c\x2c\x1b\x8b\xc6\xe0\xa3\xb3\x11\x27\xa2\x55\x94\xf9\x6a\x9c\x73\x77\xed\x94\x8d\xc3\xa2\x6c\x8d\xe1\xf3\xb1\x30\x5c\x5a\x41\xf8\x44\x47\xb5\x26\x8e\xec\x6f\x6a\x31\xec\x78\xb2\x1d\x48\xbf\x4c\x6a\x33\x17\x34\xba\xb7\xb5\xfe\x84\x17\xd0\xab\x74\xbd\x11\xf0\xc6\x05\x3e\x60\x74\x44\xbd\xf7\xc0\x69\xed\xf3\xf7\x5b\x19\xdb\x08\x3d\x2e\x5d\xad\xf6\xae\x1b\xef\xb2\x6b\x85\x9c\x40\x16\x78\x1d\x69\xd1\x63\x84\x7f\x46\x9e\x32\x16\x17\x31\x6f\x36\xee\x44\xe1\x9c\xa3\x19\xe7\x7f\x13\x53\xcc\xe1\x05\xfc\x24\x0c\x61\x3d\x69\xe1\x4f\x73\x38\x46\x5b\x1a\xd9\x38\x61\x1f\xa6\xf6\x72\x72\xa8\xf5\xa1\x28\x1f\x62\xee\x4a\x9f\x72\x38\x50\xca\xcd\xd8\x0a\x91\x0b\x38\xd4\x35\xcd\xd0\xf0\xc7\x91\x92\xe5\x83\x6b\x6a\x6c\xe2\xea\x88\x2d\x8d\x00\x54\x16\x37\xac\xf7\x42\x5a\x5a\x5f\x6f\xac\xf1\x43\x4d\x1b\xcb\xe9\xf6\x6e\x9d\x06\xbf\x4d\x95\x7c\x0c\x6b\xe6\xac\xf2\x7f\x3e\x4a\x4d\xd2\xd9\xbf\x21\xb5\xcb\x4d\xd2\xb0\xa9\xc0\x13\xce\xbb\x1b\x62\x2b\x76\x84\x45\x0f\x25\xb9\xd3\xed\xbf\xdc\xf1\xaa\xa7\x77\x49\x6c\xa5\x87\xf3\x8f\x9f\xd0\x81\x2b\x71\xe0\x86\x31\x6e\x1e\x37\xba\x1b\xd5\xd6\xa8\x1c\x4a\xa1\xd4\x1d\x9b\xee\x07\xd0\x65\x3e\xcd\xd5\x8c\xc8\x3d\xfa\x1a\x7f\xc3\xf7\xcb\x8b\x33\xfe\xba\xc1\x5f\x5c\x40\x78\x01\x62\x42\x51\x6b\x56\x56\x3d\xfb\x1a\xca\x99\xd0\x53\x5c\x61\x0f\x13\xfd\x3a\xf9\x3e\xd7\xef\x14\x8c\x46\x23\xf8\x1f\xb6\xb6\x3a\xd7\x5a\xcb\x41\xf8\x6f\x6f\x6f\xb9\x06\x51\xd4\x12\x1a\x36\x79\xcc\xef\xcb\xd2\xb2\x45\x5f\x08\x3f\x86\x59\x7a\x7a\x32\xe6\x67\xc3\xd7\x44\xa6\xc5\xbe\x52\xcb\x5b\xea\xa4\x2f\xf6\xff\x04\x00\x00\xff\xff\x2c\x2b\xb1\x94\xd5\x06\x00\x00")

func jsBugappJsBytes() ([]byte, error) {
	return bindataRead(
		_jsBugappJs,
		"js/BugApp.js",
	)
}

func jsBugappJs() (*asset, error) {
	bytes, err := jsBugappJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/BugApp.js", size: 1749, mode: os.FileMode(436), modTime: time.Unix(1452990114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsBuglistJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x51\x6b\xdb\x30\x10\x7e\xb6\x7e\xc5\xa1\x51\x90\xdb\x60\x43\x1f\x53\x27\x0f\x6d\xc7\x18\x8c\x31\xba\xbe\x2d\xa3\x28\xf1\x39\x11\x55\xa4\x20\xc9\x81\x50\xfc\xdf\x77\x92\xec\x36\xa3\x94\xbe\x28\xd2\xe5\xee\xbb\xef\xbb\xef\x7c\x94\x0e\x6e\xfb\xed\x0f\xe5\x03\x2c\xe0\x01\xe5\x26\x54\x1b\x87\x32\xe0\x9d\x96\xde\x8b\x17\x56\xb4\xca\x1f\xb4\x3c\xfd\x94\x7b\x9c\x03\x1f\x93\xf9\x8c\xb1\x62\x8b\xe1\x1e\x3b\xd9\xeb\xf0\xcb\xd9\x83\x9f\x43\xd7\x9b\x4d\x50\xd6\x80\x28\x81\x2a\x0b\x87\xa1\x77\x26\x5d\x0b\xfe\xa8\x82\x46\x9e\x21\x3c\xd5\xc7\x58\xba\xce\xe1\xcf\xdf\xf4\xb4\x86\xde\x77\x5a\x6d\x9e\xb1\x3d\x07\xc3\x8c\x56\x14\x58\x1d\x1c\x1e\xd1\x4c\x6d\x45\x79\x93\x5b\xdc\xc4\xbf\x07\x3a\x06\xba\x0d\x04\xe6\xd0\xb4\xe8\xde\x33\x8a\x7a\xc3\x4e\x46\xb1\x61\xa7\xfc\xcd\x18\x42\x8d\x7b\x82\xf5\x63\x98\xda\x90\x9e\x2a\xb2\xab\xf6\xf2\x20\xde\x50\x8e\x52\x8f\x64\x46\x6d\xe7\x23\xfb\x9a\x51\x44\xe2\xca\xb5\xca\x22\x8b\x17\x78\xc6\xd3\xdb\xe8\xbe\x07\xdc\x73\xb8\x02\x82\x82\x21\x67\x7c\x08\x52\x70\x39\x82\x10\xca\xce\x61\x47\x30\x5f\xf8\x0c\xac\x49\x63\x9a\x27\x2d\x23\xdb\xf3\xe9\x4d\xc0\x24\x4e\xa7\x4b\x19\xcf\x32\xca\x1d\xd2\xf9\x09\x7b\xde\xaa\x63\x6e\x6c\x7a\xad\xd3\xe5\x63\xa1\xbb\xeb\x91\xe3\x6b\x6e\x71\x36\xc4\x64\x7b\xea\xfe\x09\x8c\xd5\xef\x60\x26\x5b\xd8\xa8\x20\x52\x1f\x58\x54\x50\x5f\xb2\x68\x0a\x88\xf5\xb4\xbe\x0f\xc9\x71\x74\x25\x7c\xc3\x70\x6b\xdb\x13\x39\xee\x83\x53\x66\x1b\xfd\x52\xde\xf7\xe8\x67\xf0\x04\xf3\x05\x28\xdb\x07\xa5\x2b\xa2\xd2\xde\x2b\x27\xd6\xd1\x66\x2a\x7a\xb0\x36\xc4\x77\x49\xe6\xf0\x3a\x57\xf0\x92\xc5\x65\x0a\xb1\x8c\x37\xbb\xeb\x65\x74\x6e\x9d\x45\xc5\xb4\xa6\xa6\x58\x63\xf5\x92\xb3\xa2\xb3\x0e\x9e\x66\x90\x0a\x63\xbe\x93\x66\x8b\xf9\xe9\x5f\x97\xaf\x55\x0e\x52\x43\xea\x84\x9b\x60\xdd\x89\x76\xee\xff\x80\x48\x25\x55\xfc\xe0\x44\x59\x66\xb3\xe0\x6a\x01\xdd\x3e\x54\xbf\x0f\xa4\x28\x74\x82\x37\x5a\x2d\x1b\x99\x76\x62\xb1\x9a\xd8\xd6\x17\x7e\xc5\x97\x17\xbe\xa9\xe5\xb2\xa9\x29\x63\x65\x68\x59\x04\xf5\x2c\x67\xb1\x73\xf5\x68\x13\xf3\x04\x3b\xb0\x09\x98\x54\x24\x05\x6c\x5a\x0b\xfa\x61\xc3\x65\xfd\x2f\x00\x00\xff\xff\x05\xd5\x94\xee\x1d\x04\x00\x00")

func jsBuglistJsBytes() ([]byte, error) {
	return bindataRead(
		_jsBuglistJs,
		"js/BugList.js",
	)
}

func jsBuglistJs() (*asset, error) {
	bytes, err := jsBuglistJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/BugList.js", size: 1053, mode: os.FileMode(436), modTime: time.Unix(1452990114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsBugpageJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xcf\x4a\x03\x31\x10\xc6\xcf\xc9\x53\x0c\xf1\xd2\x85\xb6\x07\xf1\x20\x2d\x1e\x6c\xf5\x20\x88\x4a\xf1\x05\x42\x76\xda\x0d\x4d\x93\x25\x7f\x0a\xb2\xec\xbb\x3b\xcd\x6e\x6d\x2b\xac\x8a\x97\x25\xcc\x7c\xf3\x9b\xf9\x3e\x76\x2f\x3d\x2c\xd2\xe6\x4d\x6e\x10\xee\x60\x85\x52\xc5\xa9\xf2\x28\x23\x2e\x8d\x0c\x61\xd4\x70\x56\xea\x50\x1b\xf9\xf1\x22\x77\x38\x03\xd1\x8b\xc5\x98\x73\xe6\xd1\x96\xe8\x67\xb0\x4e\x56\x45\xed\x2c\x8c\x0a\xa0\x01\xaa\xc7\xe4\xed\x05\xed\xd1\xe0\x0e\x6d\x1c\x51\x97\x89\x52\xef\x69\x9e\x5e\x36\x19\x93\x1f\x43\xd2\x33\x2d\x6b\x40\x1d\x4e\xea\xef\x50\xce\x4c\x76\xe5\xe4\x56\x40\xdb\xb5\x07\x11\x4c\x54\xd7\x3d\xe2\xb4\x90\xb1\x58\xe9\x30\xad\xbd\xab\xc3\xf4\x5d\x47\x83\xb9\x5a\xfc\xca\x3a\xdd\x33\x00\x7b\xc0\xa0\xbc\xae\x0f\x79\xfc\x11\x29\x8f\xc0\x06\x2a\x8f\x6b\x32\x77\x25\xc6\xe0\xec\xd2\x68\xb5\x9d\xc1\x19\xdb\xd9\x85\x54\xdb\xa3\x63\x26\x56\x5d\xd0\xd1\x81\xd1\x21\x8a\x6e\x1f\xff\x5a\xfa\xef\x54\x6f\x7e\x4c\x95\x7e\x81\x67\x5a\x37\x86\x06\x72\x72\x34\xf7\x1a\x2b\xf4\xf0\x14\x42\xc2\x70\x74\x43\xb2\x70\x71\xfd\xbd\x31\x87\x5a\xdf\x26\x2f\x69\x93\x2d\x62\xf9\xcd\x64\xa6\x9d\xba\x59\xdf\x76\xbe\xe8\x53\xcc\x39\x6b\x79\x5b\xcc\x3f\x03\x00\x00\xff\xff\x17\xca\x22\xd1\xbc\x02\x00\x00")

func jsBugpageJsBytes() ([]byte, error) {
	return bindataRead(
		_jsBugpageJs,
		"js/BugPage.js",
	)
}

func jsBugpageJs() (*asset, error) {
	bytes, err := jsBugpageJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/BugPage.js", size: 700, mode: os.FileMode(436), modTime: time.Unix(1452990114, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/BugApp.js":  jsBugappJs,
	"js/BugList.js": jsBuglistJs,
	"js/BugPage.js": jsBugpageJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"BugApp.js":  &bintree{jsBugappJs, map[string]*bintree{}},
		"BugList.js": &bintree{jsBuglistJs, map[string]*bintree{}},
		"BugPage.js": &bintree{jsBugpageJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

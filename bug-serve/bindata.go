// Code generated by go-bindata.
// sources:
// js/BugApp.js
// js/BugList.js
// js/BugPage.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsBugappJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\xcf\x4f\xe3\x3a\x10\x3e\xa7\x7f\x85\x5f\x0e\x28\xe8\x55\x81\xf7\xb4\xa7\xa2\x1e\xa0\x20\x60\xc5\x2f\x41\x0f\x2b\xad\xf6\x60\x92\x69\xeb\xc5\x75\xb2\xb6\xc3\x82\x50\xff\xf7\x1d\x7b\x9c\xc6\x85\x66\x81\x4b\xa5\x8e\xbf\x6f\xe6\x9b\x9f\x79\xe4\x9a\x1d\x35\xf3\xc3\xba\x66\x63\x76\x0b\xbc\xb0\x79\xa1\x81\x5b\x98\x48\x6e\x4c\xf6\x32\x48\x4a\x61\x6a\xc9\x9f\xaf\xf8\x12\x46\x2c\x25\x6c\x3a\x1c\x0c\x92\xa2\x5a\xd6\x95\x02\x65\x8f\x45\x79\x59\x35\xca\x8e\xd8\xac\x51\x85\x15\x95\x62\xd9\x2e\x43\x6a\xe2\xbc\xdb\x05\xb7\xe8\xdb\x2e\x84\x39\x40\xd3\xe1\x4f\xfe\x74\x0a\x36\x4b\xf7\x84\x31\x0d\x98\xbd\x74\x18\xd1\x34\x18\xf4\x69\x80\xe8\x89\xe3\xe6\x06\xec\x9d\x45\x45\x99\x37\x25\x4e\x82\x49\x47\xec\xeb\xdd\xf5\x55\x5e\x73\x6d\xa0\x63\x39\xc0\x6a\xd7\x85\xa1\xdf\x2e\x18\x3a\xb1\x42\x21\xf1\xb3\xd1\xee\x5a\xe2\x87\x22\xae\x86\x83\x64\x0e\xf6\x5c\x09\x2b\xb8\xf4\x8e\xde\x56\x45\x83\x6d\xb4\xa2\x98\xb1\xff\x17\xc7\x46\xd3\x54\x58\x09\xf8\x3f\xbd\xae\x41\xb1\x73\x5f\xa6\x94\x9e\x42\xee\xdf\x7f\x0c\x03\x59\x42\x61\xa1\x44\x33\x5a\x55\x23\xe5\x1b\xfb\xb1\xd0\xce\x55\xea\x14\x06\x81\xb2\xe2\xee\x25\x16\x76\xdf\xcc\x3f\xd1\x31\xf6\x2f\x43\x02\xfe\xa6\x9f\xee\x5e\xa4\x6c\x7b\x41\x87\x6d\xd9\x5f\x65\x80\x01\xb7\xd4\xda\x78\x18\x82\xce\xb8\x2a\x25\xe8\x38\xa7\x20\x03\xf2\x5a\xc3\xa3\x1b\x53\x98\xf1\x46\xda\xcc\x7b\x70\xc9\xe5\xa1\x10\x19\xe4\x45\xa3\x35\x42\xa6\x5c\x63\xf7\x72\x0b\x4f\x76\x52\x29\x8b\x96\x36\x10\xea\xc3\x44\x82\xa8\xb7\x2d\xf5\xee\xba\x54\xd9\x96\xce\xb0\x55\xe7\x4b\x95\x9b\x52\xbb\xda\x17\x14\xd6\x49\x14\x33\x96\x91\x5f\xe7\x34\x8f\x3c\xb2\x7f\xc6\xde\x65\xa8\x73\xe0\xbc\x5a\xe0\x13\x09\x4b\xb4\x66\x88\xbf\xe1\x73\x18\x12\x36\xf1\xc3\x35\x62\xdb\x1d\xe7\xfe\x95\x5a\x70\x0c\xa6\xd0\xa2\x76\x02\x7b\xe1\x11\x86\x48\x97\x42\x82\xb1\x78\x15\x7a\x29\x6b\x04\x11\x5c\xc1\x1a\xd3\x8b\xa6\x67\x82\xde\x68\x51\x69\x61\x9f\x7b\xc1\x2d\x80\xe0\xe7\x25\x66\x2f\x66\xc2\x55\xba\x87\xd0\x41\x88\x32\xe5\xf3\x7e\x29\xee\x91\x60\x95\x3a\xe2\xc5\x43\x00\x6e\x0c\x06\xbd\x1f\x4a\xe9\xf6\x74\xc3\x93\x33\xd0\xeb\x84\x46\xcd\x2f\xc0\xf6\x50\x38\xf0\x6d\xa0\x6b\xbb\x00\x8d\xa6\x89\x14\xc5\x83\x1b\xbc\x30\x68\x9b\x53\x4f\xe8\x8b\x76\xad\xe3\xd9\x8e\x76\x86\x81\x34\xf0\xc1\x89\xb9\x10\xc6\xf6\x4f\x4c\x34\x25\x7f\x49\x14\xcb\xf4\x9e\xf0\x48\x5d\x77\x17\xb7\x49\xf2\x57\xad\x14\x8f\x74\x06\xd7\x87\xae\x0f\x9a\xa4\x8b\xff\x08\xda\x61\x93\x94\x2e\x29\x9b\x55\x38\x11\xe1\x75\xa3\x01\x74\x88\x29\x3b\xf7\xba\xfb\x4e\x8c\xb5\x9e\x28\x48\xa8\xac\xa7\xe3\x8f\x5f\xf9\x81\x4b\x71\xe0\xb6\x3b\x9c\x52\xac\x7b\xb7\xfb\x8d\x96\x43\x56\x70\x29\xef\x71\xa8\xfc\x46\x3b\xe4\xd3\x52\x2e\xac\x75\x1f\x65\x05\xbf\xd9\xb7\xcb\x8b\x33\xfc\x77\x0b\xbf\x30\x01\xba\x60\x01\x90\x57\x0a\x95\x95\xcf\x3e\x87\x62\xc1\xd5\x1c\x36\xbc\xd3\x89\x58\x9f\x12\x8f\xf5\x47\x8a\x8d\xc7\x63\xf6\x85\xed\xec\x74\xcd\x6b\x0c\x1a\xd9\xff\xfb\xfb\xed\x5d\x09\xa2\x5a\x2a\x5d\xe8\x29\x1e\xc7\xb6\x65\xab\x58\x08\x7e\xac\xb2\xf4\xf4\x64\x8a\x9f\x04\x9f\x93\xd5\x0d\xc4\x4a\x0d\x9e\x3d\x27\x7d\x75\xf0\x27\x00\x00\xff\xff\xb1\x0c\x38\xdf\x75\x08\x00\x00")

func jsBugappJsBytes() ([]byte, error) {
	return bindataRead(
		_jsBugappJs,
		"js/BugApp.js",
	)
}

func jsBugappJs() (*asset, error) {
	bytes, err := jsBugappJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/BugApp.js", size: 2165, mode: os.FileMode(436), modTime: time.Unix(1453344686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsBuglistJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x3f\x6b\xf3\x30\x10\xc6\x67\xf9\x53\x1c\x7a\x17\x9b\x37\x78\xe8\xe8\xd0\xa5\x69\x87\x42\x29\xa5\x74\x2b\x1d\x84\x7d\x89\x45\x64\xd9\x48\xb2\x21\x04\x7f\xf7\x9e\xfe\xb8\x31\x84\x90\xe5\x38\x9d\x4e\xbf\x7b\x9e\xd3\x24\x0c\x3c\x8d\x87\x37\x69\x1d\x3c\xc2\x27\x8a\xda\x95\xb5\x41\xe1\x70\xa7\x84\xb5\xf9\x39\x63\x8d\xb4\x83\x12\xa7\x77\xd1\x61\x05\x3c\x35\xf3\x4d\x96\xb1\x03\xba\x67\xdc\x8b\x51\xb9\x0f\xd3\x0f\xb6\x82\xfd\xa8\x6b\x27\x7b\x0d\x79\x01\xf4\x92\x19\x74\xa3\xd1\x21\x65\xfc\x4b\x3a\x85\x3c\x22\x2c\xbd\xf7\xb5\x90\x56\xf0\xfd\x13\x8e\xbd\xa6\xf3\x4e\xc9\xfa\x88\xcd\x1a\x86\x91\xc6\x18\x96\x83\xc1\x09\xf5\x32\x36\x2f\xb6\x71\xc4\xd6\x5f\xcf\x14\x66\xca\x66\x82\x19\xd4\x0d\x9a\x6b\x45\xde\xaf\x6b\x85\x37\xeb\x5a\x69\xb7\xa9\x84\x0a\x3b\xc2\xda\x54\xa6\x31\xe4\xa7\xf4\xea\xca\x4e\x0c\xf9\x85\x32\x09\x95\xc4\x24\x6f\xeb\x95\xbd\x44\x4a\x1e\xb4\x72\x25\xa3\x49\x76\x86\x23\x9e\x2e\xab\x7b\x75\xd8\x71\xf8\x0f\x84\x82\x39\x76\xdc\x84\x30\x2e\x12\x84\x28\xad\xc1\x3d\x61\xfe\xf1\x0d\xf4\x3a\xac\xa9\x0a\x5e\x92\xda\xf5\xf6\x16\x30\x99\x53\x21\x29\x7c\x2c\xbc\xdd\x39\xc4\x3b\xea\x79\x23\xa7\x38\x58\x8f\x4a\x85\xe4\xb6\xd1\xf6\x21\x69\xfc\xeb\x65\xab\x25\x86\x6f\x0f\xd3\xef\x60\x7a\x75\x85\x59\xbe\x25\x4b\x0e\xbc\xf4\x39\x23\x07\xbf\x01\x00\x00\xff\xff\xc0\x85\x8c\x9c\xb7\x02\x00\x00")

func jsBuglistJsBytes() ([]byte, error) {
	return bindataRead(
		_jsBuglistJs,
		"js/BugList.js",
	)
}

func jsBuglistJs() (*asset, error) {
	bytes, err := jsBuglistJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/BugList.js", size: 695, mode: os.FileMode(436), modTime: time.Unix(1453344686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsBugpageJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\xb8\x5a\x20\xb0\x11\xdb\x88\x83\x2c\xb0\x88\x37\x0b\x34\x6e\x0f\x05\xd2\x34\x48\x7b\x2b\x72\xa0\x25\xda\x66\x43\x93\x02\x49\xa5\x0d\x02\x5f\x7b\x2e\xfa\x04\x7d\x96\x3e\x4a\x9f\xa4\x43\x5a\x92\xf5\x43\xfd\x24\x71\x13\x97\x87\xc4\x26\x39\x33\xdf\x7c\xe2\x7c\x1c\xf9\x06\x4b\x74\x1a\xcd\x2f\xf0\x9c\xa0\x13\x74\x49\xb0\xaf\x87\xbe\x24\x58\x93\x09\xc3\x4a\x75\xef\x3a\x08\x46\x40\x55\xc8\xf0\xed\x39\x5e\x92\x63\xe4\xc5\xfb\xbd\x7e\xc7\x2e\x32\x81\x83\x0b\x49\x6e\xa8\x88\x14\x2c\x1d\xa3\x59\xc4\x7d\x4d\x05\x47\xdd\x1e\x5a\xdb\x9b\x31\x13\x12\x75\x4d\x38\x0a\x81\x46\x63\xf8\xf7\x1f\xd2\x0b\xaa\x86\xa1\x14\xa1\x1a\xbe\x60\x0c\x8c\xd5\x90\x11\x3e\xd7\x0b\xb3\xbc\x0f\xdb\xb2\x0e\xcc\x30\xf6\xd3\x68\x3e\xc1\x3c\xa0\x01\x80\x04\x57\x65\x1f\x1f\xe8\xd5\x38\x67\x45\x67\xa8\x9b\xb7\x3a\xc9\xd9\x4d\x22\x29\x09\xd7\x60\x5b\x8c\x67\x46\x66\xe3\x19\xa4\x0a\xbb\xba\xae\x98\x68\x80\x46\x57\xbd\x71\xc9\x5c\x12\x1d\x49\x9e\x9f\x5f\x75\xca\x9f\xb2\xfb\x56\xfd\x94\xd9\x73\xf2\x59\xb7\x65\xf5\xa0\x81\x55\x03\xf1\x4f\x64\x76\x7f\xeb\xcc\x02\xa8\x80\xc8\x2a\x52\x0d\x17\x33\x4a\x58\x70\x29\x3e\x01\x0f\x9b\x4d\x1c\x0a\xa0\x0f\xcb\x2c\x22\xc5\x7c\x0c\x13\xce\x85\x0d\x82\x5c\x79\xbd\x62\x64\x09\xcc\x74\x4b\x7b\xcd\xf0\x02\x7a\xe3\xf5\x9d\x4b\x77\xc8\x37\x85\x19\x97\xa2\x04\x80\x16\xa9\x97\x64\x56\x1c\xad\x63\x36\xc4\x2d\xc7\xf6\x05\x1b\x2c\x83\xc1\xa8\x32\xb4\xf5\xf8\xe3\xbb\xe7\x5c\xec\x3d\x13\xdc\x43\xc4\xf0\x94\xb0\xf5\xdf\x01\xe5\x33\x51\x8b\xdf\x3c\xf1\x9d\xc2\x7f\x84\xa6\x38\x00\xf1\xad\x03\x6d\xcf\xe1\x4e\xa1\xfe\xe7\x81\x87\xa4\x34\xdb\xab\x2a\x77\x33\x8a\x82\x50\x08\x19\x4a\x2a\x24\xd5\xb7\xa6\xa4\xe3\xea\xee\x7a\x17\xf1\xa4\xd7\xcf\xca\x51\x32\x5b\xe0\x4b\x69\xac\x23\x15\xab\x42\xea\xe2\x9d\x9d\xcd\x3b\x58\xcf\x15\xcc\x97\x94\x11\xa5\x05\x27\x39\xf3\x37\xc9\x6c\xde\x43\x3a\x9d\x49\xd9\x08\x53\x08\x57\xad\xbd\x9b\xfb\x88\xc3\xdd\x60\x3f\x6e\x76\x18\x19\xaa\xd6\xff\xff\xd1\x08\xed\xed\xb9\x84\xfd\xe0\x0a\xfd\xd5\x52\xb9\x53\x00\x90\x85\x17\xc6\x17\xbf\x97\x61\x1d\x11\xa6\x48\x1b\x23\xd3\x57\xe0\x29\x23\x41\xd6\xfa\xd1\xa9\xd4\x5e\x7f\xed\xd3\x4c\xc9\x35\x88\xcd\x97\xa6\x14\x4b\x06\xf5\xe9\xb5\xbd\x13\x1c\xe5\xc6\x23\xc6\xf2\x33\xad\x0a\xb8\xa2\x70\x9d\x05\xfb\x2f\xf2\x05\xd7\x98\x72\x22\x9d\xa5\xbb\xfd\xab\xec\x63\xb4\x9c\x0a\x2d\xe1\x9a\x85\x86\x42\x45\xcb\x25\x96\xb7\x5b\xba\xd5\x16\x87\x35\x7a\x55\x26\x33\x3b\x32\x47\xe5\x3d\xd5\xec\xd9\x54\xb5\x35\xca\x97\x44\xf9\x92\x86\xa6\x5f\x69\x2b\xa9\x4f\xf1\x74\xad\xdc\xa9\xca\xe7\x99\x48\xb3\x7b\x35\x95\x5d\xf7\x72\x2a\xab\xe5\xd4\x3a\x35\x89\x6e\xbd\x66\x8e\x5a\x57\x0a\xc8\xcd\x19\x55\xba\x0f\x7e\xec\xa9\x02\x1f\x6f\xf5\x82\x48\xf4\x5a\xa9\x88\xa8\x0a\x46\x8d\x94\x1d\x3b\x14\xcf\xbd\x5b\x70\x58\x9b\x30\xea\x5f\x93\x20\x67\x25\xb8\x8d\xb5\x59\x2d\x99\xaf\x9e\x96\xb7\xd1\xe1\x23\x25\x26\x62\xad\xce\x60\x08\x2f\xad\x6e\x35\xbb\x57\x38\x1b\x92\xd1\xb6\x2d\xd0\xe6\xe6\xab\xe9\x80\xee\x15\xdc\x02\xc0\x35\xf1\xd7\x18\x16\x92\xcc\x20\xeb\xbf\xa1\xad\x10\xdc\x3e\xea\xf8\x18\x14\x5e\xd8\xeb\x70\x3d\x08\x9b\xc5\xa7\x42\xcc\x1b\x20\xae\x61\x7a\x58\x52\x3c\x58\xd0\x20\x20\xdc\x03\xbc\x5a\x46\xf5\xdd\x6d\x1a\xe2\xe7\x97\xaf\xee\xb6\x31\x19\x15\xba\x9c\x3a\x40\x09\x0b\xd5\x6e\xca\x72\x59\xe3\xf8\x77\x1d\x21\x6f\xdd\x2b\xd4\xb2\xf2\xa4\x27\x28\x11\x92\x53\xec\x5f\x37\x3d\x2a\xef\x72\xdd\xe8\x68\x81\x18\x68\xde\x8e\x53\xbd\x69\xe2\x76\x85\xeb\xcc\x8f\x40\x8d\x54\x9b\x7d\xa8\x21\xd4\x0e\x97\xf3\xb7\x86\x72\xbe\xef\xd1\x69\xea\x07\xd2\x6f\xf1\x2b\xd6\xaa\xb3\xea\x8d\x7f\x05\x00\x00\xff\xff\x20\x81\xd8\x6b\x12\x15\x00\x00")

func jsBugpageJsBytes() ([]byte, error) {
	return bindataRead(
		_jsBugpageJs,
		"js/BugPage.js",
	)
}

func jsBugpageJs() (*asset, error) {
	bytes, err := jsBugpageJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/BugPage.js", size: 5394, mode: os.FileMode(436), modTime: time.Unix(1453344687, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/BugApp.js": jsBugappJs,
	"js/BugList.js": jsBuglistJs,
	"js/BugPage.js": jsBugpageJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"BugApp.js": &bintree{jsBugappJs, map[string]*bintree{}},
		"BugList.js": &bintree{jsBuglistJs, map[string]*bintree{}},
		"BugPage.js": &bintree{jsBugpageJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

